"""
UI Components for Pending Order Management
"""
import streamlit as st
import pandas as pd
import logging
logger = logging.getLogger(__name__)
from datetime import datetime, timedelta
from typing import Dict, List, Any

from models.data_models import PendingOrder, UserProfile
from pending_orders.pending_order_manager import PendingOrderManager
from ui.components import (
    sharpstock_section_header,
    sharpstock_metric_card,
    sharpstock_info_box,
    sharpstock_metric_dashboard,
    sharpstock_dataframe
)

def display_upload_interface(pending_manager: PendingOrderManager, location_config: Dict[int, str]):
    """Upload interface for order sheets"""
    
    st.markdown("### 📤 Upload Order Sheets")
    
    # File upload
    uploaded_file = st.file_uploader(
        "Upload Excel order sheet",
        type=['xlsx', 'xls'],
        help="Upload order sheets in the same format as those generated by SharpStock",
        key="pending_orders_file_upload"  # Give it a specific key
    )
    
    if uploaded_file is not None:
        
        # Expected arrival date setting
        col1, col2 = st.columns(2)
        
        with col1:
            expected_arrival = st.date_input(
                "Expected Arrival Date",
                value=datetime.now() + timedelta(days=14),
                min_value=datetime.now().date(),
                help="When do you expect these orders to arrive?",
                key="pending_orders_arrival_date"
            )
        
        with col2:
            brand_override = st.text_input(
                "Brand/Vendor (optional)",
                placeholder="Leave blank to auto-detect",
                help="Override brand if not detected from filename",
                key="pending_orders_brand_override"
            )
        
        # Parse button
        if st.button("🔍 Parse Order Sheet", type="primary", key="parse_order_sheet_btn"):
            
            with st.spinner("📊 Analyzing order sheet..."):
                # Parse the uploaded file
                pending_orders = pending_manager.parse_order_sheet_upload(uploaded_file)
                
                if pending_orders:
                    # Update expected arrival dates and brand
                    for order in pending_orders:
                        order.expected_arrival = datetime.combine(expected_arrival, datetime.min.time())
                        if brand_override:
                            order.brand = brand_override
                        elif not order.brand:
                            # Try to detect from filename
                            filename = uploaded_file.name.lower()
                            for brand_keyword in ['nike', 'adidas', 'puma', 'vans', 'converse', 'birkenstock']:
                                if brand_keyword in filename:
                                    order.brand = brand_keyword.title()
                                    break
                    
                    # IMMEDIATELY save to session state to prevent loss
                    st.write(f"💾 **IMMEDIATELY saving {len(pending_orders)} orders...**")
                    
                    # Manual save to ensure persistence
                    manual_orders_data = []
                    for order in pending_orders:
                        manual_orders_data.append({
                            'style_number': str(order.style_number),
                            'variant_info': str(order.variant_info),
                            'color': str(order.color),
                            'size': str(order.size),
                            'quantity': int(order.quantity),
                            'location_name': str(order.location_name),
                            'location_id': int(order.location_id),
                            'expected_arrival': order.expected_arrival.isoformat(),
                            'brand': str(order.brand),
                            'notes': str(order.notes)
                        })
                    
                    # Save to session state BEFORE showing preview
                    st.session_state['pending_orders'] = manual_orders_data
                    st.session_state['pending_orders_uploaded'] = True
                    st.session_state['parsed_pending_orders'] = pending_orders  # Keep objects for preview
                    
                    st.success(f"✅ Parsed and saved {len(pending_orders)} orders!")
                    
                    # Verify save immediately
                    saved_check = st.session_state.get('pending_orders', [])
                    st.write(f"✅ Verification: {len(saved_check)} orders in session state")
                    
                else:
                    sharpstock_info_box(
                        "No valid order data found. Please check your file format.", 
                        "warning"
                    )
    
    # Show preview if orders are available
    if 'parsed_pending_orders' in st.session_state:
        parsed_orders = st.session_state['parsed_pending_orders']
        if parsed_orders:
            st.markdown("---")
            display_pending_orders_preview_simplified(parsed_orders, pending_manager)

def display_pending_orders_preview_simplified(pending_orders: List[PendingOrder], pending_manager: PendingOrderManager):
    """Simplified preview that doesn't lose orders"""
    
    st.markdown("### 🔍 Order Preview")
    
    st.write(f"📋 **Preview: {len(pending_orders)} orders ready**")
    
    # Summary metrics
    summary = pending_manager.get_pending_orders_summary(pending_orders)
    
    metrics_data = [
        {
            'title': 'Total Units',
            'value': f"{summary['total_units']:,}",
            'icon': '📦'
        },
        {
            'title': 'Unique Styles',
            'value': f"{summary['total_styles']:,}",
            'icon': '👕'
        },
        {
            'title': 'Total Line Items',
            'value': f"{summary['total_orders']:,}",
            'icon': '📋'
        },
        {
            'title': 'Locations',
            'value': f"{len(summary['by_location'])}",
            'icon': '🏪'
        }
    ]
    
    sharpstock_metric_dashboard(metrics_data)
    
    # Show breakdown
    if summary['by_location']:
        st.markdown("**📍 Breakdown by Location:**")
        
        location_df = pd.DataFrame([
            {'Location': loc, 'Units': qty} 
            for loc, qty in summary['by_location'].items()
        ])
        
        col1, col2 = st.columns(2)
        
        with col1:
            sharpstock_dataframe(location_df, height=200)
        
        with col2:
            if summary['by_brand']:
                brand_df = pd.DataFrame([
                    {'Brand': brand, 'Units': qty} 
                    for brand, qty in summary['by_brand'].items()
                ])
                st.markdown("**🏷️ Breakdown by Brand:**")
                sharpstock_dataframe(brand_df, height=200)
    
    # Detailed table
    with st.expander("📋 Detailed Order Items", expanded=False):
        orders_data = []
        for order in pending_orders:
            orders_data.append({
                'Style': order.style_number,
                'Variant': order.variant_info,
                'Location': order.location_name,
                'Quantity': order.quantity,
                'Brand': order.brand or 'Unknown',
                'Expected': order.expected_arrival.strftime('%Y-%m-%d')
            })
        
        if orders_data:
            sharpstock_dataframe(pd.DataFrame(orders_data), height=400)
    
    # Action buttons - these now just set flags since data is already saved
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("✅ Confirm Orders", type="primary", key="confirm_orders_btn"):
            # Data is already saved, just confirm
            saved_orders = st.session_state.get('pending_orders', [])
            st.success(f"✅ {len(saved_orders)} pending orders confirmed and ready!")
            
            # Clear the preview objects to clean up
            st.session_state.pop('parsed_pending_orders', None)
    
    with col2:
        if st.button("🔄 Include in Next Analysis", type="primary", key="include_analysis_btn"):
            # Set the trigger flag
            st.session_state['trigger_reanalysis_with_pending'] = True
            
            saved_orders = st.session_state.get('pending_orders', [])
            st.success(f"✅ {len(saved_orders)} orders will be included in next analysis!")
            st.info("💡 Go to Business Intelligence tab and run analysis to see the updated recommendations.")
            
            # Clear the preview objects
            st.session_state.pop('parsed_pending_orders', None)
    
    with col3:
        if st.button("❌ Discard Orders", key="discard_orders_btn"):
            # Clear everything
            st.session_state.pop('pending_orders', None)
            st.session_state.pop('pending_orders_uploaded', None)
            st.session_state.pop('parsed_pending_orders', None)
            st.session_state.pop('trigger_reanalysis_with_pending', None)
            
            st.success("🗑️ Orders discarded")
            st.rerun()

def display_pending_orders_preview(pending_orders: List[PendingOrder], pending_manager: PendingOrderManager):
    """Preview parsed orders before confirming"""
    
    st.markdown("### 🔍 Order Preview")
    
    # DEBUG: Add session state check
    debug_session_state()
    
    # Summary metrics
    summary = pending_manager.get_pending_orders_summary(pending_orders)
    
    metrics_data = [
        {
            'title': 'Total Units',
            'value': f"{summary['total_units']:,}",
            'icon': '📦'
        },
        {
            'title': 'Unique Styles',
            'value': f"{summary['total_styles']:,}",
            'icon': '👕'
        },
        {
            'title': 'Total Line Items',
            'value': f"{summary['total_orders']:,}",
            'icon': '📋'
        },
        {
            'title': 'Locations',
            'value': f"{len(summary['by_location'])}",
            'icon': '🏪'
        }
    ]
    
    sharpstock_metric_dashboard(metrics_data)
    
    # Show detailed breakdown
    if summary['by_location']:
        st.markdown("**📍 Breakdown by Location:**")
        
        location_df = pd.DataFrame([
            {'Location': loc, 'Units': qty} 
            for loc, qty in summary['by_location'].items()
        ])
        
        col1, col2 = st.columns(2)
        
        with col1:
            sharpstock_dataframe(location_df, height=200)
        
        with col2:
            if summary['by_brand']:
                brand_df = pd.DataFrame([
                    {'Brand': brand, 'Units': qty} 
                    for brand, qty in summary['by_brand'].items()
                ])
                st.markdown("**🏷️ Breakdown by Brand:**")
                sharpstock_dataframe(brand_df, height=200)
    
    # Detailed table
    with st.expander("📋 Detailed Order Items", expanded=False):
        orders_data = []
        for order in pending_orders[:100]:  # Limit display for performance
            orders_data.append({
                'Style': order.style_number,
                'Variant': order.variant_info,
                'Location': order.location_name,
                'Quantity': order.quantity,
                'Brand': order.brand or 'Unknown',
                'Expected': order.expected_arrival.strftime('%Y-%m-%d')
            })
        
        if orders_data:
            sharpstock_dataframe(pd.DataFrame(orders_data), height=400)
    
    # Confirmation buttons with DEBUG
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("✅ Confirm & Save Orders", type="primary"):
            st.write("🔍 **DEBUG: Starting save process...**")
            
            # Try to save with detailed logging
            try:
                result = pending_manager.save_pending_orders(pending_orders)
                st.write(f"📦 Save result: {result}")
                
                # Check what was actually saved
                saved_orders = st.session_state.get('pending_orders', [])
                uploaded_flag = st.session_state.get('pending_orders_uploaded', False)
                
                st.write(f"📋 Orders in session state: {len(saved_orders)}")
                st.write(f"🚩 Upload flag: {uploaded_flag}")
                
                if result and len(saved_orders) > 0:
                    st.success(f"✅ Successfully saved {len(saved_orders)} pending order items!")
                    
                    # Force set the flag if needed
                    st.session_state['pending_orders_uploaded'] = True
                    st.write("🔧 Manually set pending_orders_uploaded = True")
                    
                    # Verify it's set
                    verify_flag = st.session_state.get('pending_orders_uploaded', False)
                    st.write(f"✅ Verification - Upload flag is now: {verify_flag}")
                    
                    st.rerun()
                else:
                    st.error("❌ Failed to save pending orders")
                    st.write(f"Debug: result={result}, saved_count={len(saved_orders)}")
                    
            except Exception as e:
                st.error(f"❌ Save error: {e}")
                import traceback
                st.code(traceback.format_exc())
    
    with col2:
        if st.button("🔄 Re-analyze with These Orders"):
            st.write("🔍 **DEBUG: Starting re-analysis trigger...**")
            
            # Save orders first
            if pending_manager.save_pending_orders(pending_orders):
                st.write("✅ Orders saved successfully")
                
                # Force set both flags
                st.session_state['pending_orders_uploaded'] = True
                st.session_state['trigger_reanalysis_with_pending'] = True
                
                st.write("🔧 Set flags:")
                st.write(f"  pending_orders_uploaded: {st.session_state.get('pending_orders_uploaded')}")
                st.write(f"  trigger_reanalysis_with_pending: {st.session_state.get('trigger_reanalysis_with_pending')}")
                
                st.success("✅ Orders saved! Navigate to Business Intelligence tab to see updated analysis.")
            else:
                st.error("❌ Failed to save orders")
    
    with col3:
        if st.button("❌ Cancel"):
            st.rerun()

def display_current_pending_orders(pending_orders: List[PendingOrder], pending_manager: PendingOrderManager):
    """Display currently saved pending orders"""
    
    st.markdown("### 📋 Current Pending Orders")
    
    # ALWAYS load fresh from session state
    fresh_orders = pending_manager.load_pending_orders()
    if fresh_orders:
        pending_orders = fresh_orders
        st.write(f"✅ Loaded {len(fresh_orders)} orders from session state")
    
    if not pending_orders:
        sharpstock_info_box("No pending orders saved", "info")
        return

    if not pending_orders:
        sharpstock_info_box("No pending orders saved", "info")
        return
    
    # Summary
    summary = pending_manager.get_pending_orders_summary(pending_orders)
    
    metrics_data = [
        {
            'title': 'Total Pending Units',
            'value': f"{summary['total_units']:,}",
            'icon': '📦'
        },
        {
            'title': 'Pending Styles',
            'value': f"{summary['total_styles']:,}",
            'icon': '👕'
        },
        {
            'title': 'Average Arrival',
            'value': f"{min(order.expected_arrival for order in pending_orders).strftime('%m/%d')}",
            'icon': '📅'
        }
    ]
    
    sharpstock_metric_dashboard(metrics_data[:3])
    
    # Group by brand for better organization
    by_brand = {}
    for order in pending_orders:
        brand = order.brand or 'Unknown'
        if brand not in by_brand:
            by_brand[brand] = []
        by_brand[brand].append(order)
    
    # Display by brand
    for brand, brand_orders in by_brand.items():
        with st.expander(f"🏷️ {brand} ({len(brand_orders)} items)", expanded=True):
            
            # Create dataframe for this brand
            brand_data = []
            for order in brand_orders:
                brand_data.append({
                    'Style': order.style_number,
                    'Variant': order.variant_info or 'All',
                    'Location': order.location_name,
                    'Quantity': order.quantity,
                    'Expected': order.expected_arrival.strftime('%Y-%m-%d'),
                    'Notes': order.notes
                })
            
            if brand_data:
                sharpstock_dataframe(pd.DataFrame(brand_data), height=300)
    
    # Management actions
    st.markdown("---")
    st.markdown("### 🔧 Manage Pending Orders")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("🔄 Rerun Analysis with Pending Orders", type="primary"):
            st.session_state['trigger_reanalysis_with_pending'] = True
            st.success("✅ Analysis will include pending orders on next run")
    
    with col2:
        if st.button("📊 Export Pending Orders"):
            # Create export DataFrame
            export_data = []
            for order in pending_orders:
                export_data.append({
                    'Style Number': order.style_number,
                    'Brand': order.brand,
                    'Variant': order.variant_info,
                    'Color': order.color,
                    'Size': order.size,
                    'Location': order.location_name,
                    'Quantity': order.quantity,
                    'Expected Arrival': order.expected_arrival.strftime('%Y-%m-%d'),
                    'Notes': order.notes
                })
            
            csv = pd.DataFrame(export_data).to_csv(index=False)
            st.download_button(
                "📥 Download CSV",
                csv,
                f"pending_orders_{datetime.now().strftime('%Y%m%d')}.csv",
                "text/csv"
            )
    
    with col3:
        if st.button("🗑️ Clear All Pending Orders"):
            if st.button("⚠️ Confirm Clear All", type="secondary"):
                pending_manager.clear_pending_orders()
                st.success("Cleared all pending orders")
                st.rerun()

def display_pending_orders_settings(pending_manager: PendingOrderManager):
    """Settings for pending orders"""
    
    st.markdown("### ⚙️ Pending Orders Settings")
    
    # Global settings
    col1, col2 = st.columns(2)
    
    with col1:
        default_lead_time = st.number_input(
            "Default Lead Time (days)",
            min_value=1,
            max_value=90,
            value=14,
            help="Default expected arrival time for new orders"
        )
    
    with col2:
        auto_clear_on_arrival = st.checkbox(
            "Auto-clear orders on arrival date",
            value=False,
            help="Automatically remove orders from pending when arrival date passes"
        )
    
    # Analysis settings
    st.markdown("**🧠 Analysis Integration Settings**")
    
    include_in_reorder = st.checkbox(
        "Include pending orders in reorder calculations",
        value=True,
        help="Factor pending inventory into reorder recommendations"
    )
    
    include_in_transfers = st.checkbox(
        "Include pending orders in transfer recommendations", 
        value=True,
        help="Consider pending inventory when suggesting transfers"
    )
    
    pending_weight = st.slider(
        "Pending order confidence weight",
        min_value=0.5,
        max_value=1.0,
        value=0.9,
        step=0.1,
        help="How much to weight pending orders vs confirmed inventory (0.5 = 50% confidence)"
    )
    
    # Save settings
    if st.button("💾 Save Settings"):
        # Save to session state (in real app, save to user profile)
        st.session_state['pending_orders_settings'] = {
            'default_lead_time': default_lead_time,
            'auto_clear_on_arrival': auto_clear_on_arrival,
            'include_in_reorder': include_in_reorder,
            'include_in_transfers': include_in_transfers,
            'pending_weight': pending_weight
        }
        st.success("Settings saved!")

def display_how_it_works():
    """Explanation of how pending orders work"""
    
    st.markdown("### 💡 How Pending Orders Work")
    
    st.markdown("""
    **Pending Orders** allow you to include orders you've placed (but haven't received yet) in your inventory analysis.
    
    #### 🎯 Why Use This Feature?
    - **Avoid over-ordering** - Don't reorder items you've already ordered
    - **Better planning** - See your projected inventory levels after pending orders arrive
    - **Smarter recommendations** - Get recommendations that account for incoming stock
    
    #### 📤 How to Upload:
    1. **Export order sheets** from your vendors or use SharpStock-generated order sheets
    2. **Upload the Excel file** using the upload interface
    3. **Set expected arrival date** for the orders
    4. **Confirm and save** the pending orders
    
    #### 🔄 Supported Formats:
    - **Summary sheets** - Style numbers with store columns (Hilo, Kailua, etc.)
    - **Individual store sheets** - Detailed variant breakdowns per store
    - **SharpStock order sheets** - Automatically recognizes the format you're used to
    
    #### 🧠 Analysis Integration:
    Once uploaded, pending orders are automatically included in:
    - **Reorder recommendations** - Reduced quantities based on incoming stock
    - **Transfer suggestions** - Account for pending inventory at each location
    - **Trend analysis** - More accurate demand forecasting
    - **Inventory projections** - See your future inventory levels
    """)
    
    # Example format
    with st.expander("📋 Example Order Sheet Format", expanded=False):
        st.markdown("**Summary Format (Style-based):**")
        
        example_data = {
            'Style Number': ['SHOE001', 'SHOE002', 'SHIRT001'],
            'Description': ['Running Shoe', 'Basketball Shoe', 'Cotton T-Shirt'],
            'Hilo': [5, 3, 8],
            'Kailua': [10, 7, 12],
            'Kapaa': [4, 2, 6],
            'Wailuku': [6, 5, 10]
        }
        
        st.dataframe(pd.DataFrame(example_data))
        
        st.markdown("**Individual Store Format (Variant-based):**")
        
        variant_example = {
            'Style Number': ['SHOE001', 'SHOE001', 'SHOE002'],
            'Color': ['Black', 'White', 'Red'],
            'Size': ['9', '10', '9.5'],
            'Quantity': [3, 2, 4]
        }
        
        st.dataframe(pd.DataFrame(variant_example))

def display_pending_orders_alert():
    """Alert shown on dashboard when pending orders are active"""
    
    if st.session_state.get('pending_orders_uploaded', False):
        pending_manager = PendingOrderManager(
            st.session_state.get('user_profile'), 
            st.session_state.get('location_config', {})
        )
        pending_orders = pending_manager.load_pending_orders()
        
        if pending_orders:
            summary = pending_manager.get_pending_orders_summary(pending_orders)
            
            st.info(f"""
            📦 **Pending Orders Active**: {summary['total_units']:,} units across {summary['total_styles']} styles
            
            Analysis includes projected inventory after pending orders arrive.
            [Manage Pending Orders](/Pending_Orders) | [Clear Pending Orders]
            """)
            
            if st.button("🗑️ Clear Pending Orders", key="clear_pending_alert"):
                pending_manager.clear_pending_orders()
                st.rerun()

def debug_session_state():
    """Debug what's in session state"""
    st.write("🔍 **DEBUG: Session State Analysis**")
    
    # Check all pending order related keys
    pending_keys = [k for k in st.session_state.keys() if 'pending' in k.lower()]
    st.write(f"📋 Pending-related keys in session state: {pending_keys}")
    
    for key in pending_keys:
        value = st.session_state.get(key)
        if isinstance(value, list):
            st.write(f"  {key}: List with {len(value)} items")
        else:
            st.write(f"  {key}: {value}")
    
    # Check the specific flags we need
    uploaded_flag = st.session_state.get('pending_orders_uploaded', 'NOT_SET')
    trigger_flag = st.session_state.get('trigger_reanalysis_with_pending', 'NOT_SET')
    orders_data = st.session_state.get('pending_orders', 'NOT_SET')
    
    st.write(f"📦 pending_orders_uploaded: {uploaded_flag}")
    st.write(f"🔄 trigger_reanalysis_with_pending: {trigger_flag}")
    st.write(f"📋 pending_orders: {type(orders_data)} - {len(orders_data) if isinstance(orders_data, list) else 'Not a list'}")

def save_pending_orders(self, pending_orders: List[PendingOrder]) -> bool:

    """Save pending orders to session state for persistence during analysis"""
    
    try:
        st.write("🔍 **DEBUG: Save process starting...**")
        st.write(f"📋 Orders to save: {len(pending_orders)}")
        
        # Convert to dict format for session state
        orders_data = []
        for i, order in enumerate(pending_orders):
            order_dict = {
                'style_number': order.style_number,
                'variant_info': order.variant_info,
                'color': order.color,
                'size': order.size,
                'quantity': order.quantity,
                'location_name': order.location_name,
                'location_id': order.location_id,
                'expected_arrival': order.expected_arrival.isoformat(),
                'brand': order.brand,
                'notes': order.notes
            }
            orders_data.append(order_dict)
            
            if i < 3:  # Show first 3 for debugging
                st.write(f"  Order {i+1}: {order.style_number} - {order.location_name} - {order.quantity} units")
        
        st.write(f"📊 Converted {len(orders_data)} orders to dict format")
        
        # Save to session state
        st.session_state['pending_orders'] = orders_data
        st.session_state['pending_orders_uploaded'] = True
        
        st.write("💾 Saved to session state")
        
        # Verify the save
        saved_orders = st.session_state.get('pending_orders', [])
        upload_flag = st.session_state.get('pending_orders_uploaded', False)
        
        st.write(f"✅ Verification:")
        st.write(f"  Saved orders count: {len(saved_orders)}")
        st.write(f"  Upload flag: {upload_flag}")
        
        return len(saved_orders) > 0 and upload_flag
        
    except Exception as e:
        logger.error(f"Error saving pending orders: {e}")
        st.error(f"❌ Save error: {e}")
        import traceback
        st.code(traceback.format_exc())
        return False
    
def display_pending_orders_interface(user_profile: UserProfile, location_config: Dict[int, str]):
    """Main interface for pending orders management"""
    
    try:
        # Initialize pending order manager
        pending_manager = PendingOrderManager(user_profile, location_config)
        
        # Page header
        from ui.components import sharpstock_page_header, sharpstock_section_header
        
        sharpstock_page_header(
            "📦 Pending Orders Management",
            "Upload and manage orders that haven't been received yet"
        )
        
        # Main tabs for the interface
        tab1, tab2, tab3, tab4 = st.tabs([
            "📤 Upload Orders",
            "📋 Current Orders", 
            "💡 How It Works",
            "⚙️ Settings"
        ])
        
        with tab1:
            display_upload_interface(pending_manager, location_config)
        
        with tab2:
            # Load and display current pending orders
            current_orders = pending_manager.load_pending_orders()
            display_current_pending_orders(current_orders, pending_manager)
        
        with tab3:
            display_how_it_works()
        
        with tab4:
            display_pending_orders_settings(pending_manager)
            
    except Exception as e:
        st.error(f"❌ Error in pending orders interface: {e}")
        with st.expander("🔍 Debug Details"):
            import traceback
            st.code(traceback.format_exc())    